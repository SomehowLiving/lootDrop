ActiveGiveaways:


import { useEffect, useState } from "react";
import { getContract } from "../utils/contract";
import { ethers } from "ethers";

export default function ActiveGiveaways({ signer }) {
  const [giveaways, setGiveaways] = useState([]);
  const [joiningGiveawayId, setJoiningGiveawayId] = useState(null);
  const [refreshToggle, setRefreshToggle] = useState(false);
  const [userAddress, setUserAddress] = useState("");

  useEffect(() => {
    if (!signer) return;
    signer.getAddress().then(setUserAddress);
  }, [signer]);

  const loadActiveGiveaways = async () => {
    try {
      const contract = getContract(signer);
      const activeIds = await contract.getActiveGiveaways();

      const all = await Promise.all(
        activeIds.map(async (id) => {
          const g = await contract.giveaways(id);
          const participants = await contract.getParticipants(id);

          return {
            id: g.id.toString(),
            name: g.name,
            prizeAmount: ethers.utils.formatEther(g.prizeAmount),
            participants: participants.length,
            maxParticipants: g.maxParticipants.toString(),
            endTime: new Date(Number(g.endTime) * 1000).toLocaleString(),
            isCreator: g.creator.toLowerCase() === userAddress.toLowerCase(),
            showParticipants: false,
            participantList: [],
            finalizing: false,
          };
        })
      );

      setGiveaways(all);
    } catch (err) {
      console.error("Error loading giveaways", err);
    }
  };

  useEffect(() => {
    if (signer) {
      loadActiveGiveaways();
    }
  }, [signer, refreshToggle, userAddress]);

  const joinGiveaway = async (giveawayId) => {
    try {
      setJoiningGiveawayId(giveawayId);
      const contract = getContract(signer);
      const tx = await contract.joinGiveaway(giveawayId);
      await tx.wait();
      alert("Successfully joined the giveaway!");
      setRefreshToggle(!refreshToggle);
    } catch (err) {
      console.error("Join failed", err);
      alert(err?.reason || "Join failed. Maybe already joined or not allowed.");
    } finally {
      setJoiningGiveawayId(null);
    }
  };

  const fetchParticipants = async (giveawayId) => {
    try {
      const contract = getContract(signer);
      const participants = await contract.getParticipants(giveawayId);
      setGiveaways((prev) =>
        prev.map((g) =>
          g.id === giveawayId
            ? { ...g, showParticipants: true, participantList: participants }
            : g
        )
      );
    } catch (err) {
      console.error("Failed to fetch participants", err);
    }
  };

  const finalizeGiveaway = async (giveawayId) => {
    try {
      const contract = getContract(signer);
      setGiveaways((prev) =>
        prev.map((g) => (g.id === giveawayId ? { ...g, finalizing: true } : g))
      );
      const tx = await contract.requestRandomWinner(giveawayId);
      await tx.wait();
      alert("Randomness requested!");
    } catch (err) {
      console.error("Finalize failed", err);
      alert(err?.reason || "Finalize failed");
    } finally {
      setGiveaways((prev) =>
        prev.map((g) => (g.id === giveawayId ? { ...g, finalizing: false } : g))
      );
    }
  };

  // ðŸ‘‡ Auto-payout on Chainlink callback
  useEffect(() => {
    if (!signer) return;

    const contract = getContract(signer);

    const handleWinnersSelected = async (giveawayId, winners) => {
      try {
        const tx = await contract.payoutWinners(giveawayId);
        await tx.wait();
        alert("Prizes paid out!");
        setRefreshToggle((r) => !r);
      } catch (err) {
        console.error("Auto payout failed", err);
      }
    };

    contract.on("WinnersSelected", handleWinnersSelected);

    return () => {
      contract.off("WinnersSelected", handleWinnersSelected);
    };
  }, [signer]);

  return (
    <div>
      <h2>Active Giveaways</h2>
      {giveaways.length === 0 ? (
        <p>No active giveaways yet.</p>
      ) : (
        giveaways.map((g) => (
          <div
            key={g.id}
            style={{
              border: "1px solid #ccc",
              marginBottom: "1rem",
              padding: "1rem",
            }}
          >
            <h3>{g.name}</h3>
            <p>Prize: {g.prizeAmount} ETH</p>
            <p>
              Participants: {g.participants}/{g.maxParticipants}
            </p>
            <p>Ends At: {g.endTime}</p>
            <p>Giveaway ID: {g.id}</p>

            <button
              onClick={() => joinGiveaway(g.id)}
              disabled={joiningGiveawayId === g.id}
            >
              {joiningGiveawayId === g.id ? "Joining..." : "Join Giveaway"}
            </button>

            <button onClick={() => fetchParticipants(g.id)} style={{ marginLeft: "10px" }}>
              Show Participants
            </button>

            {g.showParticipants && (
              <ul style={{ marginTop: "10px" }}>
                {g.participantList.map((addr, i) => (
                  <li key={i}>{addr}</li>
                ))}
              </ul>
            )}

            {g.isCreator && (
              <button
                onClick={() => finalizeGiveaway(g.id)}
                disabled={g.finalizing}
                style={{ display: "block", marginTop: "10px" }}
              >
                {g.finalizing ? "Finalizing..." : "Finalize Giveaway"}
              </button>
            )}
          </div>
        ))
      )}
    </div>
  );
}


// import { useEffect, useState } from "react";
// import { getContract } from "../utils/contract";
// import { ethers } from "ethers";

// export default function ActiveGiveaways({ signer }) {
//   const [giveaways, setGiveaways] = useState([]);
//   const [joiningGiveawayId, setJoiningGiveawayId] = useState(null); // Track active join
//   const [refreshToggle, setRefreshToggle] = useState(false); // To trigger re-fetch

//   const loadActiveGiveaways = async () => {
//     try {
//       const contract = getContract(signer);
//       const activeIds = await contract.getActiveGiveaways();

//       const all = await Promise.all(
//         activeIds.map(async (id) => {
//           const g = await contract.giveaways(id);
//           const participants = await contract.getParticipants(id);

//           return {
//             id: g.id.toString(),
//             name: g.name,
//             prizeAmount: ethers.utils.formatEther(g.prizeAmount),
//             participants: participants.length,
//             maxParticipants: g.maxParticipants.toString(),
//             endTime: new Date(Number(g.endTime) * 1000).toLocaleString(),
//           };
//         })
//       );

//       setGiveaways(all);
//     } catch (err) {
//       console.error("Error loading giveaways", err);
//     }
//   };

//   useEffect(() => {
//     if (signer) {
//       loadActiveGiveaways();
//     }
//   }, [signer, refreshToggle]);

//   const joinGiveaway = async (giveawayId) => {
//     try {
//       setJoiningGiveawayId(giveawayId);
//       const contract = getContract(signer);
//       const tx = await contract.joinGiveaway(giveawayId);
//       await tx.wait();
//       alert("Successfully joined the giveaway!");
//       setRefreshToggle(!refreshToggle); // Re-fetch updated data
//     } catch (err) {
//       console.error("Join failed", err);
//       alert(err?.reason || "Join failed. Maybe already joined or not allowed.");
//     } finally {
//       setJoiningGiveawayId(null);
//     }
//   };

//   return (
//     <div>
//       <h2>Active Giveaways</h2>
//       {giveaways.length === 0 ? (
//         <p>No active giveaways yet.</p>
//       ) : (
//         giveaways.map((g) => (
//           <div key={g.id} style={{ border: "1px solid #ccc", marginBottom: "1rem", padding: "1rem" }}>
//             <h3>{g.name}</h3>
//             <p>Prize: {g.prizeAmount} ETH</p>
//             <p>Participants: {g.participants}/{g.maxParticipants}</p>
//             <p>Ends At: {g.endTime}</p>
//             <p>Giveaway ID: {g.id}</p>
//             <button
//               onClick={() => joinGiveaway(g.id)}
//               disabled={joiningGiveawayId === g.id}
//             >
//               {joiningGiveawayId === g.id ? "Joining..." : "Join Giveaway"}
//             </button>
//           </div>
//         ))
//       )}
//     </div>
//   );
// }



//---------------------------------------------------------------------------------------------------------------------------
//===========================================================================================================================
                                        SMART CONTRACT VERSION 1
//===========================================================================================================================
//---------------------------------------------------------------------------------------------------------------------------

// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.8.20;

// Chainlink VRF
import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol";

// OpenZeppelin utils
import "@openzeppelin/contracts/utils/Strings.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

/**
 * @title lootDrop - A verifiable ETH-based giveaway system using Chainlink VRF
 * @author ---
 */
contract lootDrop is VRFConsumerBaseV2, ReentrancyGuard {
    // --- Chainlink VRF Config ---
    VRFCoordinatorV2Interface COORDINATOR;
    uint64 private immutable s_subscriptionId;
    address private immutable vrfCoordinator;
    bytes32 private immutable keyHash;

    uint32 private constant callbackGasLimit = 100000;
    uint16 private constant requestConfirmations = 3;
    uint32 private constant numWords = 1;

    uint256 public lastRequestId;

    // --- Structs and Enums ---
    enum PrizeType { ETH, NFT, Token }

    struct Giveaway {
        uint256 id;
        string name;
        PrizeType prizeType;
        uint256 prizeAmount; // Total ETH
        uint256 startTime;
        uint256 endTime;
        address creator;
        uint32 numWinners;
        uint32 maxParticipants;
        address[] participants;
        address[] winners;
        bool isActive;
        bool randomnessRequested;
        bool paidOut;
    }

    // --- State ---
    uint256 public nextGiveawayId;
    mapping(uint256 => Giveaway) public giveaways;
    mapping(uint256 => mapping(address => bool)) public hasJoined;
    mapping(uint256 => uint256) public requestIdToGiveaway;

    // --- Events ---
    event GiveawayCreated(uint256 indexed id, string name, address indexed creator);
    event JoinedGiveaway(uint256 indexed id, address indexed participant);
    event WinnersSelected(uint256 indexed id, address[] winners);
    event PrizePaidOut(uint256 indexed id, address[] winners, uint256 amountEach);

    // --- Constructor ---
    constructor(
        uint64 subscriptionId,
        address _vrfCoordinator,
        bytes32 _keyHash
    ) VRFConsumerBaseV2(_vrfCoordinator) {
        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);
        s_subscriptionId = subscriptionId;
        keyHash = _keyHash;
        vrfCoordinator = _vrfCoordinator;
    }

    // --- Create Giveaway ---
    function createGiveaway(
        string memory _name,
        PrizeType _prizeType,
        uint256 _prizeAmount,
        uint32 _numWinners,
        uint32 _maxParticipants,
        uint256 _durationInSeconds
    ) public payable {
        require(_numWinners > 0, "Must have at least one winner");
        require(_maxParticipants >= _numWinners, "Max participants must be >= number of winners");
        require(_durationInSeconds > 0, "Duration must be > 0");
        require(_prizeType == PrizeType.ETH, "Only ETH prizes supported in MVP");
        require(msg.value == _prizeAmount, string(abi.encodePacked("Expected: ",
            Strings.toString(_prizeAmount), ", Got: ", Strings.toString(msg.value))));

        Giveaway storage g = giveaways[nextGiveawayId];
        g.id = nextGiveawayId;
        g.name = _name;
        g.prizeType = _prizeType;
        g.prizeAmount = _prizeAmount;
        g.numWinners = _numWinners;
        g.maxParticipants = _maxParticipants;
        g.startTime = block.timestamp;
        g.endTime = block.timestamp + _durationInSeconds;
        g.creator = msg.sender;
        g.isActive = true;

        emit GiveawayCreated(nextGiveawayId, _name, msg.sender);
        nextGiveawayId++;
    }

    // --- Join Giveaway ---
    function joinGiveaway(uint256 _giveawayId) public {
        Giveaway storage g = giveaways[_giveawayId];

        require(g.isActive, "Giveaway is not active");
        if (block.timestamp > g.endTime) {
            g.isActive = false;
            revert("The giveaway has ended");
        }

        require(!hasJoined[_giveawayId][msg.sender], "Already joined");
        require(g.participants.length < g.maxParticipants, "Giveaway is full");
        require(g.creator != msg.sender, "Creator cannot join");

        g.participants.push(msg.sender);
        hasJoined[_giveawayId][msg.sender] = true;

        emit JoinedGiveaway(_giveawayId, msg.sender);
    }

    // --- Request Random Winners ---
    function requestRandomWinner(uint256 _giveawayId) public {
        Giveaway storage g = giveaways[_giveawayId];

        require(g.creator == msg.sender, "Only creator can request winners");
        require(!g.randomnessRequested, "Randomness already requested");
        require(g.isActive, "Giveaway not active");
        require(block.timestamp > g.endTime || g.participants.length == g.maxParticipants, "Giveaway ongoing");
        require(g.participants.length >= g.numWinners, "Not enough participants");

        g.isActive = false;
        g.randomnessRequested = true;

        uint256 requestId = COORDINATOR.requestRandomWords(
            keyHash,
            s_subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            numWords
        );

        requestIdToGiveaway[requestId] = _giveawayId;
        lastRequestId = requestId;
    }

    // --- Chainlink Callback ---
    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {
        uint256 giveawayId = requestIdToGiveaway[requestId];
        Giveaway storage g = giveaways[giveawayId];

        uint256 participantsLength = g.participants.length;
        uint256 rand = randomWords[0];
        for (uint256 i = 0; i < g.numWinners; i++) {
            uint256 winnerIndex = uint256(keccak256(abi.encode(rand, i))) % participantsLength;
            address winner = g.participants[winnerIndex];
            g.winners.push(winner);

            // Swap-and-pop to prevent duplicates
            uint256 lastIndex = participantsLength - 1;
            if (winnerIndex != lastIndex) {
                g.participants[winnerIndex] = g.participants[lastIndex];
            }
            g.participants.pop();
            participantsLength--; // Decrease for next round
        }

        emit WinnersSelected(giveawayId, g.winners);
    }

    // --- Distribute Prize ---
    function payoutWinners(uint256 _giveawayId) public nonReentrant {
        Giveaway storage g = giveaways[_giveawayId];

        require(!g.isActive, "Giveaway still active");
        require(!g.paidOut, "Already paid");
        require(g.winners.length == g.numWinners, "Winners not finalized");

        uint256 amountPerWinner = g.prizeAmount / g.numWinners;

        for (uint256 i = 0; i < g.winners.length; i++) {
            (bool success, ) = payable(g.winners[i]).call{value: amountPerWinner}("");
            require(success, "Transfer failed");
        }

        g.paidOut = true;

        emit PrizePaidOut(_giveawayId, g.winners, amountPerWinner);
    }

    // --- Helper Functions (Optional for frontend) ---
    function getParticipants(uint256 _giveawayId) external view returns (address[] memory) {
        return giveaways[_giveawayId].participants;
    }

    function getWinners(uint256 _giveawayId) external view returns (address[] memory) {
        return giveaways[_giveawayId].winners;
    }

    function getActiveGiveaways() external view returns (uint256[] memory activeIds) {
        uint256 count = 0;
        for (uint256 i = 0; i < nextGiveawayId; i++) {
            if (giveaways[i].isActive) {
                count++;
            }
        }

        activeIds = new uint256[](count);
        uint256 index = 0;

        for (uint256 i = 0; i < nextGiveawayId; i++) {
            if (giveaways[i].isActive) {
                activeIds[index++] = i;
            }
        }
    }
}


// Full comments (NatSpec)

// BigInt("957564097617621558692694755599104655929159") % BigInt(2 ** 64)
// uint64 subscriptionId = 5324074004853993287;
// address vrfCoordinator = 0x9ddfaca8183c41ad55329bdeed9f6a8d53168b1b;
// bytes32 keyHash = 0x1770bdc7eec7771f7ba4ffd640f34260d7f095b79c92d34a5b2551d6f6cfd2be;

// Welcome to Chainlink VRF!
// We require a signature in order to ensure you are the owner of the subscription.
// Wallet address:
// 0x4e656da2f7e75d0d0d847b3aabad93364f8eb652
// VRF Coordinator address:
// 0x9ddfaca8183c41ad55329bdeed9f6a8d53168b1b
// Subscription ID:
// 95756462912433041314191082188925138349258342701870759209751991601320355929159
// 95756462912433041314191082188925138349258342701870759209751991601320355929159
//admin address-0x4e656da2f7e75d0d0d847b3aabad93364f8eb652
//
// 92811458236407836672470127098041992668612369359568908254253711530676218883099
// Key Hash:
// 0x1770bdc7eec7771f7ba4ffd640f34260d7f095b79c92d34a5b2551d6f6cfd2be




abi:


// [
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "string",
// 				"name": "_name",
// 				"type": "string"
// 			},
// 			{
// 				"internalType": "enum lootDrop.PrizeType",
// 				"name": "_prizeType",
// 				"type": "uint8"
// 			},
// 			{
// 				"internalType": "uint256",
// 				"name": "_prizeAmount",
// 				"type": "uint256"
// 			},
// 			{
// 				"internalType": "uint32",
// 				"name": "_numWinners",
// 				"type": "uint32"
// 			},
// 			{
// 				"internalType": "uint32",
// 				"name": "_maxParticipants",
// 				"type": "uint32"
// 			},
// 			{
// 				"internalType": "uint256",
// 				"name": "_durationInSeconds",
// 				"type": "uint256"
// 			}
// 		],
// 		"name": "createGiveaway",
// 		"outputs": [],
// 		"stateMutability": "payable",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint64",
// 				"name": "subscriptionId",
// 				"type": "uint64"
// 			},
// 			{
// 				"internalType": "address",
// 				"name": "_vrfCoordinator",
// 				"type": "address"
// 			},
// 			{
// 				"internalType": "bytes32",
// 				"name": "_keyHash",
// 				"type": "bytes32"
// 			}
// 		],
// 		"stateMutability": "nonpayable",
// 		"type": "constructor"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "address",
// 				"name": "have",
// 				"type": "address"
// 			},
// 			{
// 				"internalType": "address",
// 				"name": "want",
// 				"type": "address"
// 			}
// 		],
// 		"name": "OnlyCoordinatorCanFulfill",
// 		"type": "error"
// 	},
// 	{
// 		"anonymous": false,
// 		"inputs": [
// 			{
// 				"indexed": true,
// 				"internalType": "uint256",
// 				"name": "id",
// 				"type": "uint256"
// 			},
// 			{
// 				"indexed": false,
// 				"internalType": "string",
// 				"name": "name",
// 				"type": "string"
// 			},
// 			{
// 				"indexed": true,
// 				"internalType": "address",
// 				"name": "creator",
// 				"type": "address"
// 			}
// 		],
// 		"name": "GiveawayCreated",
// 		"type": "event"
// 	},
// 	{
// 		"anonymous": false,
// 		"inputs": [
// 			{
// 				"indexed": true,
// 				"internalType": "uint256",
// 				"name": "id",
// 				"type": "uint256"
// 			},
// 			{
// 				"indexed": true,
// 				"internalType": "address",
// 				"name": "participant",
// 				"type": "address"
// 			}
// 		],
// 		"name": "JoinedGiveaway",
// 		"type": "event"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "_giveawayId",
// 				"type": "uint256"
// 			}
// 		],
// 		"name": "joinGiveaway",
// 		"outputs": [],
// 		"stateMutability": "nonpayable",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "_giveawayId",
// 				"type": "uint256"
// 			}
// 		],
// 		"name": "payoutWinners",
// 		"outputs": [],
// 		"stateMutability": "nonpayable",
// 		"type": "function"
// 	},
// 	{
// 		"anonymous": false,
// 		"inputs": [
// 			{
// 				"indexed": true,
// 				"internalType": "uint256",
// 				"name": "id",
// 				"type": "uint256"
// 			},
// 			{
// 				"indexed": false,
// 				"internalType": "address[]",
// 				"name": "winners",
// 				"type": "address[]"
// 			},
// 			{
// 				"indexed": false,
// 				"internalType": "uint256",
// 				"name": "amountEach",
// 				"type": "uint256"
// 			}
// 		],
// 		"name": "PrizePaidOut",
// 		"type": "event"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "requestId",
// 				"type": "uint256"
// 			},
// 			{
// 				"internalType": "uint256[]",
// 				"name": "randomWords",
// 				"type": "uint256[]"
// 			}
// 		],
// 		"name": "rawFulfillRandomWords",
// 		"outputs": [],
// 		"stateMutability": "nonpayable",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "_giveawayId",
// 				"type": "uint256"
// 			}
// 		],
// 		"name": "requestRandomWinner",
// 		"outputs": [],
// 		"stateMutability": "nonpayable",
// 		"type": "function"
// 	},
// 	{
// 		"anonymous": false,
// 		"inputs": [
// 			{
// 				"indexed": true,
// 				"internalType": "uint256",
// 				"name": "id",
// 				"type": "uint256"
// 			},
// 			{
// 				"indexed": false,
// 				"internalType": "address[]",
// 				"name": "winners",
// 				"type": "address[]"
// 			}
// 		],
// 		"name": "WinnersSelected",
// 		"type": "event"
// 	},
// 	{
// 		"inputs": [],
// 		"name": "getActiveGiveaways",
// 		"outputs": [
// 			{
// 				"internalType": "uint256[]",
// 				"name": "activeIds",
// 				"type": "uint256[]"
// 			}
// 		],
// 		"stateMutability": "view",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "_giveawayId",
// 				"type": "uint256"
// 			}
// 		],
// 		"name": "getParticipants",
// 		"outputs": [
// 			{
// 				"internalType": "address[]",
// 				"name": "",
// 				"type": "address[]"
// 			}
// 		],
// 		"stateMutability": "view",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "_giveawayId",
// 				"type": "uint256"
// 			}
// 		],
// 		"name": "getWinners",
// 		"outputs": [
// 			{
// 				"internalType": "address[]",
// 				"name": "",
// 				"type": "address[]"
// 			}
// 		],
// 		"stateMutability": "view",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "",
// 				"type": "uint256"
// 			}
// 		],
// 		"name": "giveaways",
// 		"outputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "id",
// 				"type": "uint256"
// 			},
// 			{
// 				"internalType": "string",
// 				"name": "name",
// 				"type": "string"
// 			},
// 			{
// 				"internalType": "enum lootDrop.PrizeType",
// 				"name": "prizeType",
// 				"type": "uint8"
// 			},
// 			{
// 				"internalType": "uint256",
// 				"name": "prizeAmount",
// 				"type": "uint256"
// 			},
// 			{
// 				"internalType": "uint256",
// 				"name": "startTime",
// 				"type": "uint256"
// 			},
// 			{
// 				"internalType": "uint256",
// 				"name": "endTime",
// 				"type": "uint256"
// 			},
// 			{
// 				"internalType": "address",
// 				"name": "creator",
// 				"type": "address"
// 			},
// 			{
// 				"internalType": "uint32",
// 				"name": "numWinners",
// 				"type": "uint32"
// 			},
// 			{
// 				"internalType": "uint32",
// 				"name": "maxParticipants",
// 				"type": "uint32"
// 			},
// 			{
// 				"internalType": "bool",
// 				"name": "isActive",
// 				"type": "bool"
// 			},
// 			{
// 				"internalType": "bool",
// 				"name": "randomnessRequested",
// 				"type": "bool"
// 			},
// 			{
// 				"internalType": "bool",
// 				"name": "paidOut",
// 				"type": "bool"
// 			}
// 		],
// 		"stateMutability": "view",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "",
// 				"type": "uint256"
// 			},
// 			{
// 				"internalType": "address",
// 				"name": "",
// 				"type": "address"
// 			}
// 		],
// 		"name": "hasJoined",
// 		"outputs": [
// 			{
// 				"internalType": "bool",
// 				"name": "",
// 				"type": "bool"
// 			}
// 		],
// 		"stateMutability": "view",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [],
// 		"name": "lastRequestId",
// 		"outputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "",
// 				"type": "uint256"
// 			}
// 		],
// 		"stateMutability": "view",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [],
// 		"name": "nextGiveawayId",
// 		"outputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "",
// 				"type": "uint256"
// 			}
// 		],
// 		"stateMutability": "view",
// 		"type": "function"
// 	},
// 	{
// 		"inputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "",
// 				"type": "uint256"
// 			}
// 		],
// 		"name": "requestIdToGiveaway",
// 		"outputs": [
// 			{
// 				"internalType": "uint256",
// 				"name": "",
// 				"type": "uint256"
// 			}
// 		],
// 		"stateMutability": "view",
// 		"type": "function"
// 	}
// ]